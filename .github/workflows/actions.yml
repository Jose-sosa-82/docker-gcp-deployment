name: Deploy to Server

on:
  push:
    branches:
      - main

env:
  SSH_HOST: 34.57.24.211
  SSH_PORT: '22'
  SSH_USER: sosasjose.01
  APP_DIR: /home/sosasjose.01/docker-gcp-deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H -p ${{ env.SSH_PORT }} ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Prepare target dir on server (docker perms + rsync)
        run: |
          ssh -p ${{ env.SSH_PORT }} -o BatchMode=yes -o StrictHostKeyChecking=yes \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
              set -e
              # Herramientas para sync
              sudo apt-get update -y >/dev/null 2>&1 || true
              sudo apt-get install -y rsync >/dev/null 2>&1 || true

              # Verifica Docker instalado
              if ! command -v docker >/dev/null 2>&1; then
                echo 'Docker no est치 instalado en el servidor.' >&2
                exit 1
              fi

              # Asegura servicio y grupo docker
              sudo systemctl enable --now docker || true
              sudo getent group docker >/dev/null || sudo groupadd docker
              if ! groups \$USER | grep -q docker; then
                sudo usermod -aG docker \$USER
                echo 'Se a침adi칩 \$USER al grupo docker.'
              fi

              # Directorio de la app y permisos
              mkdir -p '${{ env.APP_DIR }}'
              sudo chown -R \$USER:\$USER '${{ env.APP_DIR }}'
            "

      - name: Upload code (rsync instead of git pull)
        run: |
          rsync -az -e 'ssh -p ${{ env.SSH_PORT }} -o BatchMode=yes -o StrictHostKeyChecking=yes' \
            --delete \
            --exclude '.git' \
            --exclude '.github' \
            ./ \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:'${{ env.APP_DIR }}/'

      - name: Deploy
        run: |
          ssh -p ${{ env.SSH_PORT }} -o BatchMode=yes -o StrictHostKeyChecking=yes \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
              set -e
              cd '${{ env.APP_DIR }}'

              # Detecta compose (plugin v2 o binario v1)
              if docker compose version >/dev/null 2>&1; then
                # Intenta sin sudo; si falla por permisos, reintenta con sudo
                (docker compose up -d --build) || (echo 'Retry con sudo...' && sudo docker compose up -d --build)
              elif command -v docker-compose >/dev/null 2>&1; then
                (docker-compose up -d --build) || (echo 'Retry con sudo...' && sudo docker-compose up -d --build)
              else
                echo 'Docker Compose no est치 instalado en el servidor.' >&2
                exit 1
              fi
            "
